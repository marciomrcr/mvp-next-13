generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  Ativo
  Desativado
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String?  @unique
  role       Role     @default(USER)
  status     Status   @default(Ativo)
  createdAt  DateTime @default(now())
  updateddAt DateTime @updatedAt

  @@index([name])
  @@map("usuarios")
}

//Filial

//Conusumidor ou Fornecedor

model PhysicalPerson {
  id          String      @id @default(cuid())
  name        String      @unique
  cpf         String?     @db.Char(11)
  identity    String?     @db.Char(10)
  birthDate   DateTime?
  whatsApp    String?     @unique @db.Char(11)
  phone       String      @unique @db.Char(11)
  status      Status      @default(Ativo)
  isSuplier   Boolean     @default(false)
  creditLimit Decimal?    @db.Decimal(7, 2)
  createdAt   DateTime    @default(now())
  updateddAt  DateTime    @updatedAt
  OrderSale   OrderSale[]
  Vendas      Vendas[]

  @@index([name])
  @@map("pessoa_fisica")
}

model LegalPerson {
  id                String    @id @default(cuid())
  name              String    @unique
  contactName       String?
  cnpj              String?   @unique @db.Char(14)
  whatsApp          String?   @unique
  phone             String?   @unique
  email             String    @unique
  instagram         String?   @unique
  stateRegistration String?   @unique @db.Char(14)
  foundingDate      DateTime?
  pixkey            String?   @unique
  creditLimit       Decimal?  @db.Decimal(7, 2)
  isSuplier         Boolean   @default(true)
  status            Boolean   @default(true)
  isCustomer        Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updateddAt        DateTime  @updatedAt

  @@index([name])
  @@map("pessoa_juridica")
}

model Brand {
  id           String    @id @default(cuid())
  name         String    @unique
  manufacturer String?
  description  String?
  status       Status    @default(Ativo)
  Product      Product[]
  createdAt    DateTime  @default(now())
  updateddAt   DateTime  @updatedAt

  @@index([name])
  @@map("marcas")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  status      Status    @default(Ativo)
  createdAt   DateTime  @default(now())
  updateddAt  DateTime  @updatedAt
  product     Product[]

  @@index([name])
  @@map("categorias")
}

model Product {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  size        String?
  colors      String?
  brand       String?
  category    String
  status      Status   @default(Ativo)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Brand         Brand?          @relation(fields: [brand], references: [name])
  Category      Category        @relation(fields: [category], references: [name])
  stockMovement stockMovement[]
  PriceSale     PriceSale[]
  PricePurchase PricePurchase[]
  ReservedStock ReservedStock[]
  Stock         Stock[]
  OrderSale     OrderSale[]

  @@index([name])
  @@map("produtos")
}

model Stock {
  id         String   @id @default(cuid())
  productId  String   @unique
  amount     Int
  min_stock  Int?
  createdAt  DateTime @default(now())
  updateddAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@map("estoque")
}

model ReservedStock {
  id         String   @id @default(cuid())
  productId  String
  customer   String
  amount     Int
  createdAt  DateTime @default(now())
  updateddAt DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])

  @@map("estoque_reservado")
}

model stockMovement {
  id          String   @id @default(cuid())
  productId   String
  entryOutput String   @db.Char(1)
  amount      Int
  createdAt   DateTime @default(now())
  updateddAt  DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@map("movimento_estoque")
}

//Venda, compra, devolução, troca
model Operation {
  id            String          @id @default(cuid())
  title         String          @unique
  OrderPurchase OrderPurchase[]

  @@index([title])
  @@map("operacoes")
}

//Aberto, Fechado, Cancelado
model OperationStatus {
  id            String          @id @default(cuid())
  description   String
  OrderPurchase OrderPurchase[]

  @@map("status_venda")
}

model OrderSale {
  id               String         @id @default(cuid())
  physicalPersonId String
  productId        String
  amount           String
  unitPrice        String
  discount         String
  totalPrice       String
  createdAt        DateTime       @default(now())
  updateddAt       DateTime       @updatedAt
  product          Product        @relation(fields: [productId], references: [id])
  physicalPerson   PhysicalPerson @relation(fields: [physicalPersonId], references: [id])

  @@map("venda")
}

model OrderPurchase {
  id                String   @id @default(cuid())
  operationId       String
  operationStatusId String
  peopleId          String
  createdAt         DateTime @default(now())
  updateddAt        DateTime @updatedAt

  operation       Operation       @relation(fields: [operationId], references: [id])
  operationStatus OperationStatus @relation(fields: [operationStatusId], references: [id])

  @@map("pedido_compra")
}

// model OrderSaleItems {
//   id          String    @id @default(cuid())
//   orderSaleId String
//   productId   String
//   mount       String
//   unitPrice   String
//   discount    String
//   sum_total   String
//   product     Product   @relation(fields: [productId], references: [id])
//   orderSale   OrderSale @relation(fields: [orderSaleId], references: [id])

//   @@map("iten_Pedido_venda")
// }

model PriceSale {
  productId String
  salePrice Decimal  @db.Decimal(7, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@id([productId])
  @@map("precoVenda")
}

model PricePurchase {
  productId     String
  purchasePrice Decimal  @db.Decimal(7, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id])

  @@id([productId])
  @@map("precoCompra")
}

model Income {
  id          String   @id @default(cuid())
  title       String   @unique
  description String?
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([title])
  @@map("receitas")
}

model Expense {
  id          String   @id @default(cuid())
  title       String   @unique
  description String?
  status      Status   @default(Ativo)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([title])
  @@map("despesas")
}

model Marcas {
  id        String @id @default(cuid())
  marcaNome String @unique

  @@index([marcaNome])
}

model Categoria {
  id            String @id @default(cuid())
  categoriaNome String @unique

  @@index([categoriaNome])
}

model Vendas {
  id        String   @id @default(cuid())
  cartId    String
  clienteId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart           @relation(fields: [cartId], references: [id])
  cliente PhysicalPerson @relation(fields: [clienteId], references: [id])
}

model Cart {
  id         String       @id @default(cuid())
  qtde_Items Int          @default(0)
  total      Int          @default(0)
  Cart_Items Cart_Items[]
  Vendas     Vendas[]
}

model Cart_Items {
  produtosId String
  cartId     String
  qtde       Int      @default(1)
  preco      Int      @default(1)
  desconto   Int      @default(0)
  subTotal   Int      @default(1)
  cart       Cart     @relation(fields: [cartId], references: [id])
  produto    Produtos @relation(fields: [produtosId], references: [id])

  @@id([produtosId, cartId])
}

model Produtos {
  id           String         @id @default(cuid())
  produtoNome  String         @unique
  marca        String
  categoria    String
  preco        Int            @default(1)
  imagem       String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  precosVendas PrecosVendas[]
  estoque      Estoque[]
  Cart_Items   Cart_Items[]

  @@index([produtoNome])
}

model PrecosVendas {
  id         String   @id @default(cuid())
  produtosId String   @unique
  precoVenda Int      @default(1)
  produto    Produtos @relation(fields: [produtosId], references: [id])

  @@index([produtosId])
}

model Estoque {
  id         String   @id @default(cuid())
  qtde       Int      @default(1)
  precoCusto Int      @default(1)
  produtosId String   @unique
  produto    Produtos @relation(fields: [produtosId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([produtosId])
}
